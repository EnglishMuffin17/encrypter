from typing import Protocol, overload, Text, Sequence


class _Needle_Struct(Protocol):
    def __init__(self, super_obj: _File_Struct, pattern, contents: [str]): ...
    def all_lines(self): ...
    @overload
    def from_lines(self, stop: int): ...
    @overload
    def from_lines(self, start: int, stop: int): ...
    @overload
    def from_lines(self, start: int, stop: int, interval: int): ...
    def stamp_contents(self): ...
    def erase_stamp(self): ...
class _Stitch_Struct(Protocol): ...
    def __init__(self, super_obj: _File_Struct, pattern, contents: [str]): ...
    def all_lines(self): ...
    @overload
    def from_lines(self, stop: int): ...
    @overload
    def from_lines(self, start: int, stop: int): ...
    @overload
    def from_lines(self, start: int, stop: int, interval: int): ...
    def stamp_contents(self): ...
    def erase_stamp(self): ...
class _Unknit_Struct(Protocol): ...
    def __init__(self, super_obj: _File_Struct, pattern, contents: [str]): ...
    def all_lines(self): ...
    @overload
    def from_lines(self, stop: int): ...
    @overload
    def from_lines(self, start: int, stop: int): ...
    @overload
    def from_lines(self, start: int, stop: int, interval: int): ...
    def stamp_contents(self): ...
    def erase_stamp(self): ...
